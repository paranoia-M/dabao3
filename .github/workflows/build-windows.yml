# .github/workflows/build-windows.yml

name: Build Windows Application

# 触发条件：
# 1. 当代码被推送到 main 分支时
# 2. 或者当您在 GitHub Actions 页面手动触发时
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-windows-app:
    # 运行环境：最新的 Windows Server
    runs-on: windows-latest

    steps:
      # 第1步：检出您的代码库
      - name: Check out repository code
        uses: actions/checkout@v4

      # 第2步：设置 Python 环境
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 第3步：安装所有依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # 从 requirements.txt 一次性安装所有库，包括 PyInstaller
          pip install -r requirements.txt

      # 第4步：使用 PyInstaller 打包成 .exe 文件
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed `
            --name="ProductionScheduler" `
            --icon="assets/icon.ico" `
            main.py

      # 第5步：上传构建好的 .exe 文件作为 "Artifact"
      # "Artifact" 是 GitHub Actions 用于存储构建产物的机制
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # 上传后的产物名称
          name: Production-Scheduler-Windows
          # 要上传的文件的路径
          path: dist/ProductionScheduler.exe